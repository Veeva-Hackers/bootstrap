

Class declarations
One alternative to calling "include" to declare classes is to use a class declaration, where you omit the name of the class:
class { 'apache':
	default_vhost => false,
}
In the above example, we simply pull in the existing "apache" class from the "apache" module we downloaded from the Forge.
If we had wanted to include the "apache" class with its default parameter settings, we could have just used the "include apache" syntax. Turns out that just like the "lvmguide" class, the "apache" class is defined to accept parameters. Since we wanted to set the "default_vhost" parameter, we used the resource-like class declaration syntax. This allows us to set "default_vhost" to "false".

Class parameters
You can specify a class to have parameters, like so:
class lvmguide (
	$document_root = '/var/www/html/lvmguide', 
	$port = '80',
) {
	class { 'apache':
		default_vhost => false,
	}
	apache::vhost { 'learning.puppetlabs.vm': 
		port => $port,
		docroot => $document_root,
	}
	file { '/var/www/html/lvmguide':
		ensure => directory,
		owner => $::apache::params::user,
		group => $::apache::params::group,
		source => 'puppet:///modules/lvmguide/html', recurse => true,
		require => Class['apache'],
	} 
}
People who declare this class can pass in whatever they like for $document_root and $port. The values defined in the class are the default values for when users of the class don't pass in an argument.

Separating definitions from declarations
NEVER put the "include" for your class in the same file that it's defined. *Always* separate the definition from the declaration.

Declaring classes (class declarations)
The simplest way to direct Puppet to apply a class definition on a system is by using the "include" directive. For example, to invoke the class "ntp" from the example below, you would have to say:
include ntp
in a Puppet manifest, and apply that manifest. Puppet will know *where* to find the definition for that class through the Module (which we'll learn about later).

Class definitions
When you first define a class, Puppet simply registers it as being defined. You still have to DECLARE the class in order to make changes and manage to the resources specified in the definition.

Classes
In Puppet's language "classes" are named blocks of Puppet code. Once you have defined a class, you can invoke it by name. A class DEFINITION looks as follows:
class ntp {
	case $operatingsystem {
		centos, redhat: {
			$service_name 	= 'ntpd'
			$conf_file 		= 'ntp.conf.el'
		}
		debian, ubuntu: {
			$service_name	= 'ntp'
			$conf_file		= 'ntp.conf.debian'
		}
	}

	package { 'ntp':
		ensure => installed,
	}
	file { 'ntp.conf':
		path	=> '/etc/ntp.conf',
		ensure	=> file,
		require => Package['ntp'],
		source 	=> "/root/examples/answers/${conf_file}"
	}
	service { 'ntp':
		name 		=> $service_name,
		ensure		=> running,
		enable		=> true,
		subscribe 	=> File['ntp.conf'],
	}
}


Package/File/Service
This is the most common Puppet paradigm in use. Typically, you'll use Puppet to install a package, setup a config file for said package, and then ensure that a service is running for that particular package. The service should subscribe to changes in the config file. Here is a perfect example of Package/File/Service:
package { 'openssh-server':
  ensure => present,
  before => File['/etc/ssh/sshd_config'],
}

file { '/etc/ssh/sshd_config':
  ensure => file,
  mode   => 600,
  source => '/root/examples/sshd_config',
}

service { 'sshd':
  ensure    => running,
  enable    => true,
  subscribe => File['/etc/ssh/sshd_config'],
}

Referring to files by title
A Puppet manifest can refer to a File by title if you've already defined that File in the manifest. It looks like the following:
File['/etc/ssh/sshd_config'] 		(where '/etc/ssh/sshd_config' is the *title* of the file resource in that same Puppet manifest)

Subscribing a service to changes in a file (e.g., config file)
You can "subscribe" a service to restart whenever a config file is changed. It looks like the following:
service { 'sshd':
  ensure	=> running,
  enable 	=> true,
  subscribe => File['/etc/ssh/sshd_config']
}

Copying over the contents of a file
You can populate a file with the contents of another file. It looks like the following:
file { '/etc/ssh/sshd_config':
  ensure => file,
  mode   => 600,
  source => '/root/examples/sshd_config',
}

How to order resources
There are four metaparameter attributes that you can include in your resource declaration to ORDER RELATIONSHIPS among resources.
 - "before" cases a resource to be applied BEFORE a specified resource.
 - "require" causes a resource to be applied AFTER a specified resource.
 - "notify" causes a resource to be applied BEFORE the specified resource. Notify will generate a refresh even whenever the resource changes.
 - "subscribe" causes a resource to be applied AFTER the specified resource. The subscribing resource will be refreshed if the target resource changes.
The actual value of the metaparameter is the title (or titles, in an array) of one or more target resources.

Metaparameters
"Metaparameters" follow the familiar "attribute => value" syntax. These are the things we've seen this whole time.

Conditionals
Puppet supports conditionals. Ugh. 
 - if
 - elsif
 - else
 - unless
 - case 

Facts
Puppet can access Facts (from Facter) as variables. Puppet's compiler uses Facter to come up with a bunch of information about your system and makes it available to Puppet as variables.
Reference these Facts as follows:
$::ipaddress			(the "::" indicates that we always want the top-scope variable)

Variables
Puppet has variables. You can access them as:
$my_variable 						(as a stand-alone variable), or
"my_variable: ${my_variable}"		(when interpolated in a string)

Ordering
In Puppet, resource declarations HAVE NO INHERENT ORDER. They execute in any order Puppet deems fit, unless you manually set dependencies on your resources.
However, Puppet variables DO HAVE ORDER. You must assign a variable in your manifest before you can use it.

Validate Puppet code
Use the "puppet parser" method to check your Puppet DSL code for syntax errors before you run "puppet apply".

"puppet apply"
Use the "puppet apply" tool to enforce a manifest locally. In the real world, you'll want an easier method ot apply multiple definitions across multiple systems from a central source. For now, manifests and "puppet apply" aid in learning the Puppet language in small, iterative steps.

Manifests
"Manifests" are files containing Puppet code. They are standard text files saved with the .pp extension.

One-off commands.
Use "puppet describe" to have Puppet describe a Resource Type (e.g., "user").
Use "puppet resource" to have Puppet describe a particular Resource (e.g., a user named "root").

Puppet RAL (Resource Abstraction Layer)
Puppet's providers are collectively referred to as the "Resource Abstraction Layer", or "RAL" for short.
E.g., when you wish to install a package, you can stand back and watch Puppet figure out whether to use "yum" or "apt" for package management.

Providers
Puppet works by exposing to you a declarative DSL called the Puppet DSL, where you describe the desired state of your machine. How Puppet gets there is achieved through "providers." Puppet completely abstracts away the implementation of getting a system to your desired state through a set of these "providers". 

Resource Title
A "Resource Title" names a Resource. In the example below:
user { 'root':
	ensure => 'present',
	comment => 'root',
	gid => '0',
	home => '/root',
	password => '$1$jrm5tnjw$h8JJ9mCZLmJvIxvDLjw1M/', 
	password_max_age => '99999',
	password_min_age => '0',
	shell => '/bin/bash',
	uid => '0',
}
the word "'root'" is the Resource Title. The title of a resource is used to identify it and MUST be unique.

Resource Type examples
Some of the core resource types you'll encounter include:
 user 		- A user
 group		- A user group
 file		- A specific file
 package	- A software package
 service	- A running service
 cron 		- A scheduled cron job
 exec 		- An external command
 host		- A host entry

Resource Type
A "Resource Type" defines a Resource. They are written *before* the curly braces. E.g., in the following example:
user { 'root':
	ensure => 'present',
	comment => 'root',
	gid => '0',
	home => '/root',
	password => '$1$jrm5tnjw$h8JJ9mCZLmJvIxvDLjw1M/', 
	password_max_age => '99999',
	password_min_age => '0',
	shell => '/bin/bash',
	uid => '0',
}
the word "user" is the Resource Type.

Puppet DSL
Puppet's declarative programming language is called the "Puppet DSL".

Resource Declaration
The block of Puppet code that describes a resource is called a "resource declaration".

Resources
"Resources" are the fundamental units for modeling system configurations. Each resource describes some aspect of a asystem, like a service that must be running or a package that must be installed.

Classification
In order to put a Puppet module to use, you need to assign classes to Puppet nodes. This process is called "classification".

Facter
Puppet Enterprise includes other tools to help administer your systems. "Facter" is the name of one of these tools. Facter is Puppet's cross-platform system profiling library. It discovers and reports per-node facts, which are available in your Puppet manifests as variables. Facter is also free.

Puppet Class
A "class" in Puppet is just a named block of Puppet code. Modules typically include a class of the same name (e.g., lvmguide).

Puppet Tutorial: Tasks
In this tutorial, Quests are broken up into Tasks. You can interact with the Quest Tool with the command "quest". The following quests are available:
Manifest
Welcome
Resources
Classes
Forge
Ordering
Begin
Conditionals
Modules
Power
Variables

Puppet vs. Shell scripts
Puppet > shell scripts, because you can manage config on hundreds of machines without having to write complicated scripts that are hard to comprehend and maintain. Puppet is idempotent, and lets you leverage lots of existing "modules" of configuration that other people have used before you.

Puppet Enterprise
Puppet Enterprise tacks on a few additional things to Puppet.

Puppet Quests
This Puppet tutorial has a "quest" system in both it and its sample VM. Pretty cool stuff.

Local Puppet VM IP Address:
10.0.0.17